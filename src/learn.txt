// Learn States

/* 
Dalam React untuk komponen UI hanya di render 1 kali.
*/

/* function App() {
  const [showText, setShowText] = useState(true)
  const [textColor, setTextColor] = useState("black")

  const changeText = () => {
    setShowText(!showText);
    setTextColor(textColor === "black" ? "black" : "red");

  };

  return (
    <div className={style.App}>
      <button onClick={changeText}> Show/Hide </button>
      {showText === true && <h1 style={{color: textColor}}> Heloo, my name is Felix </h1>}
    </div>
  );
} */

/* function App() {
  // Exercise 
  const [count, setCount] = useState(0);

  const increaseCount = () => {
    setCount(count + 1);
  }

  const decreaseCount = () => {
    setCount(count - 1);
  }

  const zeroCount = () => {
    setCount(0);
  }

  return (
    <div className={style.App}>
      <button onClick = {increaseCount} > Increase </button>
      <button onClick = {decreaseCount}> Decrease </button>
      <button onClick = {zeroCount}> Set to Zero </button>
      {count}
    </div>
  );
}
*/

function App() {

  // Learn CRUD and Array or List
  const [doList, setDoList] = useState([]);
  const [newTask, setNewTask] = useState("");

  const handleChange = (event) => {
    setNewTask(event.target.value);
  }

  const addTask = () => {
    // '...' menandakan membuat array kosong dan parameter kedua adalah valuenya
    // Objek
    const task = {
      id: doList.length === 0 ? 1 : doList[doList.length - 1].id + 1,
      taskName: newTask,
      completed: false
    }

    const newTodoList = [...doList, task];
    setDoList(newTodoList);
  }

  // Exercise Update
  const updateTask = (id) => {
    setDoList(doList.map((task) => {
      if (task.id === id){
        return {...task, completed: true};
      } else {
        return task;
      }
    }));
  }
  const deleteTask = (id) => {

    // Cara 1
    /*const newTodoList = doList.filter((task) => {
      if (task === taskName) {
        return false;
      } else {
        return true;
      }
    }); */

    // Cara 2
    // mempersingkat if else 
    /*const newTodoList = doList.filter((task) => {
      return task !== taskName;
    }); */
    // setDoList(newTodoList);

    //Cara 3
    setDoList(doList.filter((task) => task.id !== id));
  }

  return (
    <div className={style.App}>
      <div className={style.Header}>
        <div className={style.Input}>
          <input style={{ margin: 10 }} onChange={handleChange} />
          <button onClick={addTask}> Add Task </button>
        </div>
      </div>


      {doList.map((task) => {
        return (
          <div className={style.List}>
            <Task
              taskName={task.taskName}
              id={task.id}
              completed={task.completed}
              deleteTask={deleteTask}
              updateTask={updateTask} />
          </div>
        )
      })}
    </div>
  );
}

React Lifecycle & Hook useEffect

function App() {

  const [showText, setShowText] = useState(false);

  return (
    <div className={style.App}>
      <button
        onClick={() => {
          setShowText(!showText);
        }}> Show Text </button>
      {showText && <Text />}
    </div>
  );
}

Mounting = munculnya sebuah component
Updating = mengubah sebuah component
Unmountain = menghilangkan sebuah component

useEffect sebuah hook yang akan mengontrol state pada component yang digunakan (mounting/unmountaining)
salah satu kegunaan useEffect ketika meload sebuah web page dan mengambil data dari API

useEffect () => untuk meload component yang digunakan untuk mengambil dari API
return () => untuk menghentikan request dari server 

Fetch Data from API in Reactjs

"react-scripts --openssl-legacy-provider start" 

Axios 

api.agify.io/?name=jessica

excuser.herokuapp.com

    <div className={style.App}>
      <input placeholder="Felix"
      onChange={(event) => {
        setName(event.target.value);
      }} />
      <button onClick={fetchData}> Predict Age </button>

      <h1> Predicted Name: {predictedAge.name} </h1>
      <h1> Predicted Age: {predictedAge.age} </h1>
      <h1> Predicted Count: {predictedAge.count} </h1>
    </div>

      /* const fetchCatFact = () => {
    Axios.get("https://catfact.ninja/fact").then((res) => {
      setcatText(res.data.fact);
    });
  }
  useEffect(() => {
    fetchCatFact();
  }, []);
  */

    const [name, setName] = useState("");
  const [predictedAge, setPredictedAge] = useState({});

  const fetchData = () => {
    Axios.get(`https://api.agify.io/?name=${name}`).then((res) => {
      setPredictedAge(res.data);
    });
  }

React js DOM

- npm install react-router-dom
- Router = yang akan membuat link sebuah component
- Routes = yang akan menyambungkan component dan router
- Route = sebuah component yang memiliki path 

    <div className={style.App}>
      <Router>
        <div> 
          <Link to="/"> Home </Link>
          <Link to="/contact"> Contact </Link>
          <Link to="/menu"> Menu </Link>
        </div>
        <Routes>
          <Route path="/" element ={<Home/>} />
          <Route path="/menu" element ={<Menu/>} />
          <Route path="/contact" element ={<Contact/>} />
        </Routes>
      </Router>
    </div>

